AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template to deploy an EC2 instance for running gitpod-network-check tool'

Parameters:
  Region:
    Type: String
    Default: eu-central-1
    Description: AWS Region to deploy the resources in
    
  VpcId:
    Type: String
    Description: VPC ID where the resources will be deployed
    
  MainSubnets:
    Type: CommaDelimitedList
    Description: Comma-separated list of main subnet IDs (e.g., subnet-123,subnet-456)
    
  PodSubnets:
    Type: CommaDelimitedList
    Description: Comma-separated list of pod subnet IDs (e.g., subnet-789,subnet-012)
    
  HttpsHosts:
    Type: CommaDelimitedList
    Default: accounts.google.com,github.com
    Description: Comma-separated list of HTTPS hosts to test connectivity (e.g., accounts.google.com,github.com)
    
  InstanceAMI:
    Type: String
    Default: ''
    Description: (Optional) Custom AMI ID. If not specified, the latest Ubuntu AMI will be used
    
  ApiEndpoint:
    Type: String
    Default: ''
    Description: (Optional) API endpoint regional subdomain for testing connectivity
    
  LogLevel:
    Type: String
    Default: debug
    AllowedValues:
      - debug
      - info
      - warning
      - error
    Description: Log level for the gitpod-network-check tool
    
  InstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t3.micro
      - t3a.micro
    Description: EC2 instance type to use for the network check

Conditions:
  UseCustomAMI: !Not [!Equals [!Ref InstanceAMI, '']]
  HasApiEndpoint: !Not [!Equals [!Ref ApiEndpoint, '']]

Mappings:
  RegionMap:
    us-east-1:
      UbuntuAMI: ami-0c7217cdde317cfec
    us-east-2:
      UbuntuAMI: ami-05fb0b8c1424f266b
    us-west-1:
      UbuntuAMI: ami-0ce2cb35386fc22e9
    us-west-2:
      UbuntuAMI: ami-008fe2fc65df48dac
    eu-central-1:
      UbuntuAMI: ami-0faab6bdbac9486fb
    eu-west-1:
      UbuntuAMI: ami-0905a3c97561e0b69
    eu-west-2:
      UbuntuAMI: ami-0e5f882be1900e43b
    eu-west-3:
      UbuntuAMI: ami-0493936afbe820b28
    eu-north-1:
      UbuntuAMI: ami-0989fb15ce71ba39e
    ap-southeast-1:
      UbuntuAMI: ami-0df7a207adb9748c7
    ap-southeast-2:
      UbuntuAMI: ami-04f5097681773b989
    ap-northeast-1:
      UbuntuAMI: ami-03dceaabddff8d3e7
    ap-northeast-2:
      UbuntuAMI: ami-0f3a440bbcff3d043
    ap-south-1:
      UbuntuAMI: ami-0287a05f0ef0e9d9a
    sa-east-1:
      UbuntuAMI: ami-0af6e9042ea5a4e3e
    ca-central-1:
      UbuntuAMI: ami-0a2e7efb4257c0907

Resources:
  # IAM Role for the EC2 instance
  GitpodNetworkCheckRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'GitpodNetworkCheck-${AWS::StackName}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Tags:
        - Key: gitpod.io/network-check
          Value: 'true'

  # Instance profile for the EC2 instance
  GitpodNetworkCheckInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub 'GitpodNetworkCheck-${AWS::StackName}'
      Roles:
        - !Ref GitpodNetworkCheckRole
      Tags:
        - Key: gitpod.io/network-check
          Value: 'true'

  # Security group for the EC2 instance
  GitpodNetworkCheckSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for gitpod-network-check EC2 instance
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: Allow outbound HTTPS traffic
      VpcId: !Ref VpcId
      Tags:
        - Key: gitpod.io/network-check
          Value: 'true'
        - Key: Name
          Value: !Sub 'GitpodNetworkCheck-SG-${AWS::StackName}'

  # EC2 instance to run the gitpod-network-check tool
  GitpodNetworkCheckInstance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !If 
        - UseCustomAMI
        - !Ref InstanceAMI
        - !FindInMap [RegionMap, !Ref 'AWS::Region', UbuntuAMI]
      IamInstanceProfile: !Ref GitpodNetworkCheckInstanceProfile
      SecurityGroupIds:
        - !GetAtt GitpodNetworkCheckSecurityGroup.GroupId
      SubnetId: !Select [0, !Ref MainSubnets]
      Tags:
        - Key: gitpod.io/network-check
          Value: 'true'
        - Key: Name
          Value: !Sub 'GitpodNetworkCheck-Instance-${AWS::StackName}'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          
          # Update and install dependencies
          apt-get update
          apt-get install -y curl jq awscli python3-pip
          pip3 install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz

          # Install SSM agent
          snap start amazon-ssm-agent
          systemctl enable snap.amazon-ssm-agent.amazon-ssm-agent.service
          systemctl restart snap.amazon-ssm-agent.amazon-ssm-agent.service
          
          # Create directory for gitpod-network-check
          mkdir -p /opt/gitpod-network-check
          cd /opt/gitpod-network-check
          
          # Download the latest gitpod-network-check binary
          curl -s https://api.github.com/repos/gitpod-io/enterprise-deployment-toolkit/releases/latest | \
          grep "browser_download_url.*$(uname -s)_$(uname -m)" | \
          cut -d : -f 2,3 | \
          tr -d \" | \
          xargs curl -L | tar -xz
          
          # Format the subnet lists correctly
          MAIN_SUBNETS=$(echo "${MainSubnets}" | tr -d '[]" ' | sed 's/,/, /g')
          POD_SUBNETS=$(echo "${PodSubnets}" | tr -d '[]" ' | sed 's/,/, /g')
          HTTPS_HOSTS=$(echo "${HttpsHosts}" | tr -d '[]" ' | sed 's/,/, /g')
          
          # Create configuration file
          cat > gitpod-network-check.yaml << EOF
          log-level: ${LogLevel}
          region: ${Region}
          main-subnets: $MAIN_SUBNETS
          pod-subnets: $POD_SUBNETS
          https-hosts: $HTTPS_HOSTS
          instance-ami: ${InstanceAMI}
          api-endpoint: ${ApiEndpoint}
          EOF
          
          # Run the network check and save output to log file
          ./gitpod-network-check diagnose > /var/log/gitpod-network-check.log 2>&1
          
          # Run cleanup to ensure all resources are removed
          ./gitpod-network-check clean >> /var/log/gitpod-network-check.log 2>&1
          
          # Signal CloudFormation that the instance is ready
          /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource GitpodNetworkCheckInstance --region ${AWS::Region}

Outputs:
  InstanceId:
    Description: ID of the EC2 instance running gitpod-network-check
    Value: !Ref GitpodNetworkCheckInstance
    
  SSMSessionURL:
    Description: URL to start an SSM session with the instance
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/systems-manager/session-manager/${GitpodNetworkCheckInstance}?region=${AWS::Region}
    
  LogFileLocation:
    Description: Location of the gitpod-network-check log file on the instance
    Value: /var/log/gitpod-network-check.log
    
  ViewLogsCommand:
    Description: Command to view the gitpod-network-check logs via SSM
    Value: !Sub |
      aws ssm start-session --target ${GitpodNetworkCheckInstance} --document-name AWS-StartInteractiveCommand --parameters command="cat /var/log/gitpod-network-check.log" --region ${AWS::Region}
